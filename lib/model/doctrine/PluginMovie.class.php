<?php

/**
 * PluginMovie
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @author     Shinichi Urabe <urabe@tejimaya.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginMovie extends BaseMovie
{
  static protected $ffmpeg_movie_instance = null;

  public function preSave($event)
  {
    if ($this->isNew())
    {
      $this->member_id = sfContext::getInstance()->getUser()->getMemberId();
    }
  }

  public function postSave($event)
  {
    if (!$this->getIsConverted())
    {
      $exec_command = sprintf('%s symfony opMovie:generate-flv %d >> /dev/null &', sfConfig::get('app_op_php_path'), $this->id);
      chdir(sfConfig::get('sf_root_dir'));
      exec($exec_command);
    }
  }

  public function postDelete($event)
  {
    if (file_exists($this->getFlvFilePath()))
    {
      @unlink($this->getFlvFilePath());
    }
    if (file_exists($this->getFilePath()))
    {
      @unlink($this->getFilePath());
    }
  }

  public function playTotal($plus = 1)
  {
    $this->play_total += $plus;
  }

  public function isShowable($member_id, $relation = null)
  {
    if (MovieTable::PUBLIC_FLAG_SNS == $this->public_flag || $this->isEditable($member_id))
    {
      return true;
    }

    if (null === $relation)
    {
      $relation = Doctrine_Core::getTable('MemberRelationship')->retrieveByFromAndTo($this->member_id, $member_id);
    }
    if (!$relation)
    {
      return false;
    }

    return true;
  }

  public function isEditable($member_id)
  {
    return $member_id === $this->member_id;
  }

  public function hasFileCache()
  {
    return file_exists($this->getFilePath()) || file_exists($this->getFlvFilePath());
  }

  public function getMovieDuration()
  {
    return $this->getMovieInstance()->getDuration();
  }

  public function getMovieFrameCount()
  {
    return $this->getMovieInstance()->getFrameCount();
  }

  public function getMovieFrameRate()
  {
    return $this->getMovieInstance()->getFrameRate();
  }

  public function getMovieFilename()
  {
    return $this->getMovieInstance()->getFilename();
  }

  public function getMovieComment()
  {
    return $this->getMovieInstance()->getComment();
  }

  public function getMovieTitle()
  {
    return $this->getMovieInstance()->getTitle();
  }

  public function getMovieAuthor()
  {
    return $this->getMovieInstance()->getAuthor();
  }

  public function getMovieCopyright()
  {
    return $this->getMovieInstance()->getCopyright();
  }

  public function getMovieArtist()
  {
    return $this->getMovieInstance()->getArtist();
  }

  public function getMovieGenre()
  {
    return $this->getMovieInstance()->getGenre();
  }

  public function getMovieTrackNumber()
  {
    return $this->getMovieInstance()->getTrackNumber();
  }

  public function getMovieYear()
  {
    return $this->getMovieInstance()->getYear();
  }

  public function getMovieFrameHeight()
  {
    return $this->getMovieInstance()->getFrameHeight();
  }

  public function getMovieFrameWidth()
  {
    return $this->getMovieInstance()->getFrameWidth();
  }

  public function getMoviePixelFormat()
  {
    return $this->getMovieInstance()->getPixelFormat();
  }

  public function getMovieBitRate()
  {
    return $this->getMovieInstance()->getBitRate();
  }

  public function getMovieVideoBitRate()
  {
    return $this->getMovieInstance()->getVideoBitRate();
  }

  public function getMovieAudioBitRate()
  {
    return $this->getMovieInstance()->getAudioBitRate();
  }

  public function getMovieAudioSampleRate()
  {
    return $this->getMovieInstance()->getAudioSampleRate();
  }

  public function getMovieFrameNumber()
  {
    return $this->getMovieInstance()->getFrameNumber();
  }

  public function getMovieVideoCodec()
  {
    return $this->getMovieInstance()->getVideoCodec();
  }

  public function getMovieAudioCodec()
  {
    return $this->getMovieInstance()->getAudioCodec();
  }

  public function getMovieAudioChannels()
  {
    return $this->getMovieInstance()->getAudioChannels();
  }

  public function hasMovieAudio()
  {
    return $this->getMovieInstance()->hasAudio();
  }

  public function hasMovieVideo()
  {
    return $this->getMovieInstance()->hasVideo();
  }

  public function getMovieFrame($num = 5)
  {
    return $this->getMovieInstance()->getFrame($num);
  }

  public function getMovieNextKeyFrame()
  {
    return $this->getMovieInstance()->getNextKeyFrame();
  }

  public function outputImageBin($size, $num = 5)
  {
    static $flame = false;

    if (false === $flame)
    {
      $frame = $this->getMovieFrame($num);
    }

    if (!is_callable(array($frame, 'toGDImage')))
    {
      $bin = file_get_contents(implode(DIRECTORY_SEPARATOR, array(dirname(__FILE__), '..', '..', '..', 'data', 'images', 'no_image.jpg')));
    }
    else
    {
      $bin = $frame->toGDImage();
    }

    $tmpname = tempnam(sys_get_temp_dir(), 'MVIMG');
    file_put_contents($tmpname, $bin);
    list($src_w, $src_h) = getimagesize($tmpname);
    $src_img = imagecreatefromjpeg($tmpname);

    if ($src_w > $src_h)
    {
      $dst_w = (int)$size;
      $dst_h = $src_h / ($src_w / (int)$size);
    }
    else
    {
      $dst_h = (int)$size;
      $dst_w = $src_w / ($src_h / (int)$size);
    }

    $dst_img = @imagecreate($dst_w, $dst_h);
    @imagecopyresized($dst_img, $src_img, 0, 0, 0, 0, $dst_w, $dst_h, $src_w, $src_h);

    header('Cache-Control: public');
    header('Pragma: public');
    header('Content-Type: image/jpeg');
    imagejpeg($dst_img);
    imagedestroy($dst_img);
    @unlink($tmpname);
  }

  public function getFilePath()
  {
    return sfConfig::get('op_movie_plugin_upload_dir').DIRECTORY_SEPARATOR.$this->getFileName();
  }

  public function getFlvFilePath()
  {
    return implode(DIRECTORY_SEPARATOR, array(sfConfig::get('op_movie_plugin_upload_dir'), 'flv', $this->getFileName().'.flv'));
  }

  protected function getMovieInstance()
  {
    if (null === self::$ffmpeg_movie_instance)
    {
      $file_path = $this->getIsConverted() ? $this->getFlvFilePath() : $this->getFilePath();

      self::$ffmpeg_movie_instance = new ffmpeg_movie($file_path);
    }

    return self::$ffmpeg_movie_instance;
  }
}
